/*
문제 설명
하루는 24시간으로 구성되어 있다. 매 시간마다 일을 하거나 쉴 수 있다.

일을 하면 피로도가 A만큼 쌓이고, 처리한 일의 양이 B만큼 증가한다.
쉬면 피로도가 C만큼 감소한다. 단, 피로도가 음수가 되면 0으로 바뀐다. 쉬는 동안에는 일의 양이 증가하지 않는다.
피로도가 M을 넘으면 번아웃이 와서 지금까지 한 모든 일을 버리고 일을 그만두게 된다.
초기 피로도는 0이다.

번아웃이 오지 않도록 하루 동안 일을 최대한 많이 할 때, 처리할 수 있는 일의 최대 양을 구하라.

입력
네 개의 정수 A, B, C, M이 공백으로 구분되어 주어진다.

A: 일할 때 증가하는 피로도 
B: 일할 때 처리하는 일의 양
C: 쉴 때 감소하는 피로도
M: 피로도의 최대치 

출력
하루(24시간) 동안 번아웃이 오지 않도록 했을 때, 처리할 수 있는 일의 최대 양을 출력한다.

생각
피로도를 최대치까지 채우고 완전히 비우고를 반복해야 할 것 같음


*/
#include <iostream>
using namespace std;

int main()
{
    int A, B, C, M;
    int day = 24;
    int work = 0;
    int fati = 0;
    cin >> A >> B >> C >> M;

    for(int i = 0; i < day; i++) {
        // 일을 한시간 할때보다 최대치가 더 작은경우 예외 처리
        if(A > M) {
            break;
        }

        if(fati + A > M) {
            fati -= C;
            if(fati < 0) {
                fati = 0;
            }
        } else {
            fati += A;
            work += B;
        }

    }
    cout << work;
    return 0;

}